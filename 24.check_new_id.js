// 항해99 - 프로그래머스 알고리즘 문제
// JavaScript - 24. 신규 아이디 추천

/* [문제]
카카오에 입사한 신입 개발자 네오는 "카카오계정개발팀"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. "네오"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.
다음은 카카오 아이디의 규칙입니다.

아이디의 길이는 3자 이상 15자 이하여야 합니다.
아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용할 수 있습니다.
단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.
"네오"는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.
신규 유저가 입력한 아이디가 new_id 라고 한다면,

1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
     만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
예를 들어, new_id 값이 "...!@BaT#*..y.abcdefghijklm" 라면, 위 7단계를 거치고 나면 new_id는 아래와 같이 변경됩니다.

1단계 대문자 'B'와 'T'가 소문자 'b'와 't'로 바뀌었습니다.
"...!@BaT#*..y.abcdefghijklm" → "...!@bat#*..y.abcdefghijklm"

2단계 '!', '@', '#', '*' 문자가 제거되었습니다.
"...!@bat#*..y.abcdefghijklm" → "...bat..y.abcdefghijklm"

3단계 '...'와 '..' 가 '.'로 바뀌었습니다.
"...bat..y.abcdefghijklm" → ".bat.y.abcdefghijklm"

4단계 아이디의 처음에 위치한 '.'가 제거되었습니다.
".bat.y.abcdefghijklm" → "bat.y.abcdefghijklm"

5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다.
"bat.y.abcdefghijklm" → "bat.y.abcdefghijklm"

6단계 아이디의 길이가 16자 이상이므로, 처음 15자를 제외한 나머지 문자들이 제거되었습니다.
"bat.y.abcdefghijklm" → "bat.y.abcdefghi"

7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다.
"bat.y.abcdefghi" → "bat.y.abcdefghi"

따라서 신규 유저가 입력한 new_id가 "...!@BaT#*..y.abcdefghijklm"일 때, 네오의 프로그램이 추천하는 새로운 아이디는 "bat.y.abcdefghi" 입니다.

[문제]
신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, "네오"가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.

[제한사항]
new_id는 길이 1 이상 1,000 이하인 문자열입니다.
new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.
new_id에 나타날 수 있는 특수문자는 -_.~!@#$%^&*()=+[{]}:?,<>/ 로 한정됩니다.

[입출력 예]
no	new_id	result
예1	"...!@BaT#*..y.abcdefghijklm"	"bat.y.abcdefghi"
예2	"z-+.^."	"z--"
예3	"=.="	"aaa"
예4	"123_.def"	"123_.def"
예5	"abcdefghijklmn.p"	"abcdefghijklmn"
입출력 예에 대한 설명
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.

1단계 변화 없습니다.
2단계 "z-+.^." → "z-.."
3단계 "z-.." → "z-."
4단계 "z-." → "z-"
5단계 변화 없습니다.
6단계 변화 없습니다.
7단계 "z-" → "z--"

입출력 예 #3
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.

1단계 변화 없습니다.
2단계 "=.=" → "."
3단계 변화 없습니다.
4단계 "." → "" (new_id가 빈 문자열이 되었습니다.)
5단계 "" → "a"
6단계 변화 없습니다.
7단계 "a" → "aaa"

입출력 예 #4
1단계에서 7단계까지 거치는 동안 new_id("123_.def")는 변하지 않습니다. 즉, new_id가 처음부터 카카오의 아이디 규칙에 맞습니다.

입출력 예 #5
1단계 변화 없습니다.
2단계 변화 없습니다.
3단계 변화 없습니다.
4단계 변화 없습니다.
5단계 변화 없습니다.
6단계 "abcdefghijklmn.p" → "abcdefghijklmn." → "abcdefghijklmn"
7단계 변화 없습니다.*/

function solution(new_id) {
  let answer = '';
  // 대문자를 확인하여 소문자로 변경하여야 하는 줄 알고 작성한 코드

  // let arr = new_id.split('');
  // console.log(arr)
  // for(i = 0; i < arr.length; i++) {
  //   if(arr[i] === arr[i].toUpperCase()) {
  //     answer += arr[i].toLowerCase()
  //   } else {
  //     answer += arr[i]
  //   }
  // }

  // 하지만 어차피 ID 내에서 소문자만 사용 가능하기 때문에, new_id.toLowerCase() 를 줘서 받아오는 전체 아이디를
  // 소문자로 변경 후 answer 변수에 지정

  // 1단계 : 모든 문자 소문자로 변환하기
  answer = new_id.toLowerCase()

  // 이 후, 정규표현식을 이용하면 간단하게 문자열을 찾고, 그 문자열을 쉽게 사용하거나 삭제가 가능함

  // 정규표현식(Regular Expression)
  // let reg = /[\{\}\[\]\/?,;:|\)*~`!^\+<>@\#$%&\\\=\(\'\"] /g;
  // 정규표현식 뒤에 붙는 /g /i /m /gi /gm /gim
  // => g : Global : 모든 문자를 검색한다 는 뜻
  // => i : Ignore Case : 대소문자 구별하지 않고 검색한다
  // => m : Multi line : 여러 행의 문자열에 대해 검색
  // 이 문제에서는 id값을 모두 가져와 소문자인 것들을 가지고 와서 검색해야 하기때문에 g 만 입력하여 사용한다.

  // => 위에 표시된 특수문자들을 전부 찾겠다! 라는 뜻이 된다.

  // 

  // let reg = /[\{\}\[\]\/?,;:|\)*~`!^\+<>@\#$%&\\\=\(\'\"] /g;
  // 이 reg를 가지고와서 replace에 넣어 반환을 하게되면
  // answer = answer.replace(reg, '')
  // => replace(reg) : 위에 적혀있는 특수문자들을 가지고와서
  // => replace( , '') : 뒤에 있는 문자로 변환해줘! 즉 '' => 삭제를 뜻한다.

  // 2단계 : 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거하기
  let reg = /[^a-z0-9\-\_\.]/g
  // 이 경우에는 /[^a-z0-9\-\_\.]/g 이렇게 정규식이 표현이 되어있는데 이 뜻을 해석하면 다음과 같다
  // 일단 기본적인 정규식 표현 방법은 / 내용 / 이 들어가고 이 뒤에 g, i, m 을 같이 사용하면 된다.
  // / [^a-z0-9\-\_\.] / g
  // => a-z (영어 소문자 알파벳 전부) / 0-9 (0~9까지 숫자 전부) / -(빼기 기호) / _(언더바 기호) / .(마침표) 를 뜻하고
  // => - / _ / . 앞에 보면 역슬래쉬(\) 가 들어가 있는 것을 볼 수 있는데 이 의미는 특수기호 마다 정규표현식에서 의미를
  // => 가지고 있는 것이 있기 때문에, 역슬래쉬(\)를 사용해 역슬래쉬(\) 뒤의 특수기호를 찾겠다! 는 뜻이 된다.
  // => 그러므로 a-z / 0-9 / - / _ / . 을 모두 찾는데 [] 안에 들어있는 ^ 표시는 Not의 의미로 부정이다.
  // => 결론은 a-z / 0-9 / - / _ / . 를 찾고 이 문자에 속하지 않는 모든 것들을 선택한다! 라는 뜻이 된다.

  answer = answer.replace(reg,'')
  // 그 후 replace를 사용하면 a-z / 0-9 / - / _ / . 가 아닌 문자들은 모두 '' 이 되어 삭제되게 된다.

  // 3단계 : 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환하기
  answer = answer.replace(/\.+(?=\.)/g, '')
  // / \. + ( ? = \. ) /g 의 의미
  // => + : 앞에 지정되어있는 문자를 확인하고 그 문자 뒤에 오는 문자를 확인한다.
  // => ?= : 삼항 연산자와 같이 조건을 확인하고 뒤의 찾는 문자가 참인 것만 찾는다.
  // => 결론 : .으로 시작하고 그 바로 뒤의 문자가 . 이 오면 이 문자를 '' 로 삭제해줘!
  // answer = answer.replace(/\.+/g, '.') 으로도 사용이 가능하다
  // /\.+/g  => . 이 한개 이상 포함된 문자열이 있다면, 그 문자열을 . 한개로 치환해줘!
  // ... => .

  // 4단계 : 마침표(.)가 처음이나 끝에 위치한다면 제거하기
  answer = answer.replace(/^\.|\.$/g, '')
  // 아까 위에서 봤던 ^ 는 [] 안에 들어 있어서 부정의 뜻을 나타냈지만
  // 이 내용은 [] 밖에 있기 때문에 부정이 아니라 첫번째 라는 뜻을 가지고 있다.
  // $ 표시는 마지막 이라는 뜻을 보유하고 있기 때문에
  // => /^\.|\.$/g => ^\. : 첫번째에 .이 있니? | (또는) \.$ 마지막에 .이 있니? 물어보는 것이다.
  // 또는(or)는 둘 중 하나만 참이 되도 실행이 되기 때문에, 첫번째 또는 마지막에 . 이 붙어 있다면 삭제해주세요! 가 된다.

  // 5단계 : 빈 문자열이라면, new_id에 "a"를 대입하기
  if(answer === '') {
    answer = 'a'
  }
  // answer에 아무것도 없다면 'a'를 입력해준다.

  // 6단계 : new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
  // 만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
  if(answer.length >= 16) {
    answer = answer.slice(0, 15) // substr 이나 substring 사용해도 무방
  }
  // answer의 길이가 16자 이상이라면 answer의 0번째부터 15번째까지 끊어서 출력해줘!
  answer = answer.replace(/\.$/g, '')
  // 이것은 4단게에서 사용했던 내용이다.
  // /\.$/g => answer의 마지막에 .이 붙어 있다면 삭제해줘!

  // 7단계 : 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙인다.
  // az => azz a => aaa
  while(answer.length <= 2) {
    answer = answer + answer.slice(answer.length - 1)
  }
  // 만약 answer의 길이가 2 이하이면 answer의 마지막 글자를 가지고와서 붙여줘!

  // answer = answer.padEnd(3, answer.substring(answer.length -1));
  // 위의 내용의 다른 표현 방식이다.
  // padEnd(문자열의 목표 길이, 목표 길이를 채워줄 문자)
  // padEnd를 사용하면 간단하게 나타낼 수 있었다.
  // 위의 식을 풀어보면 answer에 목표 길이는 3 이고, answer의 마지막 글자를 3이 될 때 까지 계속 채워줘! 가 된다.
  // substring(answer.length -1) : 마지막 글자를 가져온다

  console.log(answer)
  return answer;
}

console.log(solution("ab"))