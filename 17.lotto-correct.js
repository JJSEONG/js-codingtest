// 항해99 - 프로그래머스 알고리즘 문제
// JavaScript - 17. 로또의 최고 순위와 최저 순위

/* [문제]
로또 6/45(이하 '로또'로 표기)는 1부터 45까지의 숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 아래는 로또의 순위를 정하는 방식입니다. 1

순위	당첨 내용
1	6개 번호가 모두 일치
2	5개 번호가 일치
3	4개 번호가 일치
4	3개 번호가 일치
5	2개 번호가 일치
6(낙첨)	그 외
로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다. 하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다. 당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 최고 순위와 최저 순위를 알아보고 싶어 졌습니다.
알아볼 수 없는 번호를 0으로 표기하기로 하고, 민우가 구매한 로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 최고 순위와 최저 순위의 한 예는 아래와 같습니다.

당첨 번호	31	10	45	1	6	19	결과
최고 순위 번호	31	0→10	44	1	0→6	25	4개 번호 일치, 3등
최저 순위 번호	31	0→11	44	1	0→7	25	2개 번호 일치, 5등
순서와 상관없이, 구매한 로또에 당첨 번호와 일치하는 번호가 있으면 맞힌 걸로 인정됩니다.
알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 3등에 당첨될 수 있습니다.
3등을 만드는 다른 방법들도 존재합니다. 하지만, 2등 이상으로 만드는 것은 불가능합니다.
알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 5등에 당첨될 수 있습니다.
5등을 만드는 다른 방법들도 존재합니다. 하지만, 6등(낙첨)으로 만드는 것은 불가능합니다.
민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 win_nums가 매개변수로 주어집니다. 이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요.

제한사항
lottos는 길이 6인 정수 배열입니다.
lottos의 모든 원소는 0 이상 45 이하인 정수입니다.
0은 알아볼 수 없는 숫자를 의미합니다.
0을 제외한 다른 숫자들은 lottos에 2개 이상 담겨있지 않습니다.
lottos의 원소들은 정렬되어 있지 않을 수도 있습니다.
win_nums은 길이 6인 정수 배열입니다.
win_nums의 모든 원소는 1 이상 45 이하인 정수입니다.
win_nums에는 같은 숫자가 2개 이상 담겨있지 않습니다.
win_nums의 원소들은 정렬되어 있지 않을 수도 있습니다.
입출력 예
lottos	win_nums	result
[44, 1, 0, 0, 31, 25]	[31, 10, 45, 1, 6, 19]	[3, 5]
[0, 0, 0, 0, 0, 0]	[38, 19, 20, 40, 15, 25]	[1, 6]
[45, 4, 35, 20, 3, 9]	[20, 9, 3, 45, 4, 35]	[1, 1]
입출력 예 설명
입출력 예 #1
문제 예시와 같습니다.

입출력 예 #2
알아볼 수 없는 번호들이 아래와 같았다면, 1등과 6등에 당첨될 수 있습니다.

당첨 번호	38	19	20	40	15	25	결과
최고 순위 번호	0→38	0→19	0→20	0→40	0→15	0→25	6개 번호 일치, 1등
최저 순위 번호	0→21	0→22	0→23	0→24	0→26	0→27	0개 번호 일치, 6등
입출력 예 #3
민우가 구매한 로또의 번호와 당첨 번호가 모두 일치하므로, 최고 순위와 최저 순위는 모두 1등입니다.

실제로 사용되는 로또 순위의 결정 방식과는 약간 다르지만, 이 문제에서는 지문에 명시된 대로 로또 순위를 결정하도록 합니다.*/

function solution(lottos, win_nums) {
  var answer = []; // return 값을 채우기 위한 변수 선언
  var zeroCount = 0; // lottos 배열 안 0의 갯수
  var winCount = 0; // lottos와 win_nums 안의 내용 중 일치하는 로또 갯수
  
  // for 문을 돌려 lottos의 길이만큼 반복문을 돈다
  for(let i = 0; i < lottos.length; i++) {
    // lottos의 인덱스를 돌며 0의 값이 포함되어 있다면 zeroCount를 올려준다.
    if(lottos[i] == 0) {
      zeroCount++;
    }
    // win_nums의 안에 lottos의 내용이 포함되어 있는지 확인하고, 포함되어 있다면 winCount를 올려준다.
    if(win_nums.includes(lottos[i])) {
      winCount++
    }
    // 맞춘 갯수 : 6 / 틀린 갯수 : 0 :: 1위
    // 맞춘 갯수 : 5 / 틀린 갯수 : 1 :: 2위
    // 맞춘 갯수 : 4 / 틀린 갯수 : 2 :: 3위
    // 맞춘 갯수 : 3 / 틀린 갯수 : 3 :: 4위
    // 맞춘 갯수 : 2 / 틀린 갯수 : 4 :: 5위
    // 맞춘 갯수 : 1 / 틀린 갯수 : 5 :: 6위
    // 맞춘 갯수 : 0 / 틀린 갯수 : 6 :: 6위
    // console.log(`0의 갯수 : ${zeroCount}, 맞춘 갯수 : ${winCount}`)
    // lottos = [44, 1, 0, 0, 31, 25] (나의 로또번호)
    // win_nums = [31, 10, 45, 1, 6, 19] (당첨번호)
    // 총 1, 31 두개의 숫자가 맞으므로 맞춘 갯수는 2개
    // lottos Array 안에 0의 갯수는 2개
    // 맞춘 갯수 : 2 => 최소 5위 보장 (0의 갯수는 알 수 없으므로)
    // 0의 갯수 : 2 => 맞춘 2개에 2개가 다 맞을 수 있는 최대 기댓값 3위
    // 최대 순위 : 3, 최소 순위 : 5 를 출력해야함
    
  }

  let MIN_Rank = winCount <= 1 ? 6 : 6 - winCount + 1 // 7 - winCount
  // 최소 순위 = 맞춘 갯수가 1보다 작다면 6위를 출력하고 그렇지 않으면 6 - 맞춘 갯수를 빼고 +1 을 해서 출력해라
  // 현재 예로는 맞춘 갯수가 2개 이므로 총 6개를 맞출 수 있고, 그 6개 중 2개를 빼서 4가 나온다. 그러나 2개를 맞추면 5위이기 때문에 +1 을하여 5위를 출력해준다.
  // [ex) 맞춰야 할 총 갯수 [6] - 맞춘 갯수 [6] : 0 으로 1등을 출력해야 하므로 + 1 을 진행 ]
  // [ex) 맞춰야 할 총 갯수 [6] - 맞춘 갯수 [4] : 2 으로 3등을 출력해야 하므로 + 1 을 진행 ]

  let MAX_Rank = MIN_Rank - zeroCount === 0 ? 1 : MIN_Rank - zeroCount;
  // 최대 순위 = [최소 순위] - [0의 갯수]를 뺏을 때 0이 출력된다면 1등
  // 현재 예시로 최소 순위는 5등이지만 0의 갯수를 제외해야 하므로 0의 갯수를 빼주는 작업을 진행한다.
  // 최소 순위가 6위 이고, 0의 갯수가 6개라면 최대 순위가 1이 나와야하므로 6 - 6 === 0 이면 1을 출력하라는 조건을 주었고
  // 이외에는 최소 순위 - 0의 갯수를 출력하면 최대로 맞출 수 있는 순위가 출력이 된다.
  // [ ex) 최소 순위 [2] - 0의 갯수 [1] = 최대 순위 = [1] => 최소 순위에서 2위가 나왔기 때문에 0의 갯수가 1개까지 밖에 가질 수 없다]
  // [ ex) 최소 순위 [5] - 0의 갯수 [2] = 최대 순위 = [3] => 최소 순위에서 5위가 나왔기 때문에 0의 갯수가 4개까지 밖에 가질 수 없다]
  
  console.log(`최대 순위 : ${MAX_Rank}, 최소 순위 : ${MIN_Rank}`)


  // answer 에 push 를 이용하여 MAX_Rank 와 MIN_Rank 를 넣어주었다.
  // 간단하게 answer = [MAX_Rank, MIN_Rank] 를 사용해도 되지만 push 를 한번 더 사용해보고 자바스크립트 문법을 익히기 위해 사용했다.
  answer.push(MAX_Rank, MIN_Rank)

  return answer
}

let a = [45, 4, 35, 20, 3, 9]
let b = [20, 9, 3, 45, 4, 35]

// console.log(solution( a , b ))